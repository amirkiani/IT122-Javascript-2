<html>
<head>
    <title>React App Demo</title>
    <script src="https://unpkg.com/react@16/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
</head>

<body>

<div id="root"></div>
<script type="text/babel">
    // define your sub components here
    const ItemList = (props) => {
        return props.items.map((item) => {
            return <li>{item.title}</li>
        });
            
            const Book = props => {  
        return (
            <div>
                <ul>
                {props.bookArray.map((book) => (
                    <li key={book._id}><a href="#" onClick={props.selected}>{book.title}</a></li>
                ))}
                </ul>   
            </div>
        ); 
    };

    const BookDetails = props => {
        return (
            <div>
                <h2>Details for {props.current.title}</h2>               
                <form>
                    Title: <input onChange={props.edit} type="text" name= "title" value={props.current.title || ""}  /><br/>
                    Author: <input onChange={props.edit} type="text" name= "auth" value={props.current.auth || ""}  /><br/>
                    Year of Release: <input onChange={props.edit} type="text" name= "year" value={props.current.year || ""}  /><br/>
                    Page Count: <input  onChange={props.edit} type="text" name= "pages" value={props.current.pages || ""} />
                </form>
                <button onClick={props.reset}>Go back to list</button>
                <button onClick={props.delete}>Delete Book</button>
                <button onClick={props.save}>Save New Book</button>
                <button onClick={props.handleClear}>Clear</button>
                <div id="status"></div>
                    
            </div>
        )
    }

    class App extends React.Component{
      constructor(props){
          super(props);
          // Set initial state using data from server application
          this.state = {
            book: {{{ books }}},
            currentBook: { } // current selected item
          };

          // bind application state to click handler
          this.selectItem = this.selectItem.bind(this);
          this.resetCurrent = this.resetCurrent.bind(this);
          this.handleEdit = this.handleEdit.bind(this);
          this.handleDelete = this.handleDelete.bind(this);
          this.handleSave = this.handleSave.bind(this);
       }
       }
        handleDelete () {
            console.log('delete me')
        }
       render() {
           return (
               <div>
                   <h2>Book List</h2>
                   <ItemList items={this.state.items} />
                   <hr>
                   <ItemDetail item={this.state.currentItem} />
                   </div>
           ):
           )
       }

    
      selectItem(event) {
        event.preventDefault();
        const book = this.state.book.find(book => event.target.text === book.title);
        this.setState({currentBook: book});

        handleEdit (event) {
        console.log(event.target.name);
        console.log(event.target.value)
        let newBook = this.state.currentBook;
        newBook[event.target.name] = event.target.value;
        this.setState({currentBook: newBook});

        
    }

    handleDelete () {
      console.log('delete entry');
      fetch(`/api/books/delete/${this.state.currentBook.title}`)
        .then((response) => {
          console.log(response);
          return response.json();
        })
        .then((result) => {
            this.setState({ book: [...this.state.book.filter(book => book.title !==this.state.currentBook.title)] });

            ReactDOM.render(<h2 className="conf">"{this.state.currentBook.title}" Book deleted</h2>, document.getElementById('status'));
          this.resetCurrent();
        })
        .catch(err => console.log(err))
    }

 handleSave (event) {

      const newBook = this.state.currentBook;
      newBook[event.target.name] = event.target.value;
      fetch(`/api/books/${this.state.currentBook}`, {
        method: "POST",
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newMov)
      })
      .then((response) => response.json())     
      .then(result => {
        const newBookArray = this.state.book.map(book => {
            return book;
          })
          newBookArray.push(result)
          this.setState({ book : newBookArray})
          
// Display message for new book
          ReactDOM.render(<h2 className="conf">"{this.state.currentBook.title}" Added!</h2>, document.getElementById('status'));
          this.resetCurrent();
      })
      .catch((err) => console.log(err))
    }
 resetCurrent() {
          this.setState({currentBook: { } })
      }
      render() {
        // render the App UI elements

     if (Object.entries(this.state.currentBook).length !== 0 ) {
            return (
            <div>
                <h1>Bargain Books Welcomes You!</h1>
                <Book bookArray={this.state.book} selected={event => this.selectItem(event)}/>
            <BookDetails
                current={this.state.currentBook}
                reset={() => this.resetCurrent()}
                edit={this.handleEdit}
                delete={this.handleDelete}
                save={this.handleSave}
            />
          </div>
          );
      }
    }
    }
    ReactDOM.render(<App />, document.getElementById('root'));
</script>
</body>
</html>